# ~~~~~~~~~~~~~~~~~~~~~~ JSON File Handling  ~~~~~~~~~~~~~~~~~~~~~~>>>

# JSON stands for Java-Script Object Notation

# JSON is a lightweight data format for data interchange which can be easily read & written by humans, easily parsed
# and generated by machines.

# It is complete-language-independent text format.

# JSON is must commonly used for client-server communication because-
#      -> It is human-readable
#      -> It's both easy to read/write
#      -> JSON is language independent

# ________________________________________________________________
# ========>>> Serialization in Python


# The serialization process is a way to convert a data structure into a linear form that can be stored or transmitted
# over a network.
# This process is also called as Marshalling.

# --->> Serializing the data  --------

# 1. json.dump(object, file):
#              -> Used to write Python objects as JSON formatted data into a file.
#              -> The file can be anything including text, JSON, or even binary file.


# 2. json.dumps(object):
#              -> Serializes any python object into JSON formatted string.

# ________________________________________________________________
# ========>>> Deserialization in Python


# The reverse process, which takes a stream of bytes & converts it back into a data structure, is called
# deserialization.
# This process is also called as Unmarshalling.

# --->> Deserializing the data  --------

# 1. json.load(file):
#              -> Used to read JSON object as Python objects from a file
#              -> The file type can be anything including text, JSON, or even binary file.


# 2. json.loads(object):
#              -> deserializes a JSON formatted string into Python object.


# ---------------------------------------------------------------------



